use lib 'lib';

task 'default' => 'htmlify';

=head1 Top level repository tasks

#| Run the Perl 6 htmlify script.
task 'htmlify' => <init-highlights type-graph-images>, {
    run $*EXECUTABLE-NAME, 'htmlify.p6'
}

#| Setup the highlighting code
task 'init-highlights', {
    my $atom-dir = "./highlights/atom-language-perl6".IO;
    my $git-dir = "https://github.com/perl6/atom-language-perl6";
    if $atom-dir.e {
        indir($atom-dir, {
            run(<git pull>);
        });
    } else {
        run('git', 'clone', $git-dir, $atom-dir);
    }
    indir("./highlights", {
        run(<npm install .>);
    });
}

#| Helper sub to run various combinations of test files
sub run-tests(@files) {
    run('prove', '-j', %*ENV<TEST_JOBS> || 1, '-e', $*EXECUTABLE-NAME, |@files);
}

#| Standard tests - every commit should pass these
task 'test',  { run-tests(<t>); }

#| eXtended tests - should very regularly be run to catch issues
task 'xtest', { run-tests(<t xt>); }

#| "Content" tests
task 'ctest', { run-tests(<t/07-tabs.t xt/perl-nbsp.t xt/trailing-whitespace.t>); }

=head1 Tasks to generate site

#| Generate type graph images
task 'type-graph-images', {
    use Perl6::TypeGraph;
    use Perl6::TypeGraph::Viz;

    sub viz-group($type) {
        return 'Metamodel' if $type.name ~~ /^ 'Perl6::Metamodel' /;
        return 'Exception' if $type.name ~~ /^ 'X::' /;
        return 'Any';
    }

    sub viz-hints($group) {
        return '' unless $group eq 'Any';

        return '
        subgraph "cluster: Mu children" {
            rank=same;
            style=invis;
            "Any";
            "Junction";
        }
        subgraph "cluster: Pod:: top level" {
            rank=same;
            style=invis;
            "Pod::Config";
            "Pod::Block";
        }
        subgraph "cluster: Date/time handling" {
            rank=same;
            style=invis;
            "Date";
            "DateTime";
            "DateTime-local-timezone";
        }
        subgraph "cluster: Collection roles" {
            rank=same;
            style=invis;
            "Positional";
            "Associative";
            "Baggy";
        }
    ';
    }

    my $type-graph = Perl6::TypeGraph.new-from-file('type-graph.txt');
    my $infile-time = 'type-graph.txt'.IO.modified;

    say 'Writing type graph images to html/images/ ...';
    for $type-graph.sorted -> $type {
        my $outfile = "html/images/type-graph-{$type}.svg";
        my $outfile-time = try $outfile.IO.modified // 0;

        if $outfile-time < $infile-time {
            my $viz = Perl6::TypeGraph::Viz.new-for-type($type);
            await $viz.to-file($outfile, format => 'svg');
        }
    }
    say '';

    say 'Writing specialized visualizations to html/images/ ...';
    my %by-group = $type-graph.sorted.classify(&viz-group);
    %by-group<Exception>.append: $type-graph.types< Exception Any Mu >;
    %by-group<Metamodel>.append: $type-graph.types< Any Mu >;

    for %by-group.kv -> $group, @types {
        my $outfile = "html/images/type-graph-{$group}.svg";
        my $outfile-time = $outfile.IO.modified;
        if $outfile-time < $infile-time {
            my $viz = Perl6::TypeGraph::Viz.new(:types(@types),
                                                :dot-hints(viz-hints($group)),
                                                :rank-dir('LR'));
            await $viz.to-file($outfile, format => 'svg');
        }
    }
    say '';
}
